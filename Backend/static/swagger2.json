{
    "openapi": "3.0.0",
    "info": {
      "title": "mbi",
      "version": "1.0.0",
      "description": "The Postman API allows you to programmatically access data stored in Postman account with ease.\n\nThe easiest way to get started with the API is to click the **fork** button to fork this collection to your own workspace and use Postman to send requests.\n\n\n# Overview\n\n1. You need a valid <a href=\"#authentication\">API Key</a> to send requests to the API endpoints. You can get your key from the [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n\n1. The API has an access <a href=\"#rate-limits\">rate limit</a> applied to it.\n\n1. The Postman API will only respond to secured communication done over HTTPS. HTTP requests will be sent a `301` redirect to corresponding HTTPS resources.\n\n1. Response to every request is sent in [JSON format](https://en.wikipedia.org/wiki/JSON). In case the API request results in an error, it is represented by an `\"error\": {}` key in the JSON response.\n\n1. The request method (verb) determines the nature of action you intend to perform. A request made using the `GET` method implies that you want to fetch something from Postman, and `POST` implies you want to save something new to Postman.\n\n1. The API calls will respond with appropriate [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) for all requests. Within Postman Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A `200 OK` indicates all went well, while `4XX` or `5XX` response codes indicate an error from the requesting client or our API servers respectively.\n\n1. Individual resources in your Postman Account is accessible using its unique id (`uid`). The `uid` is a simple concatenation of the resource owner's user-id and the resource-id. For example, a collection's `uid` is `{{owner_id}}-{{collection_id}}`.\n\n# Authentication\n\nAn API Key is required to be sent as part of every request to the Postman API, in the form of an `X-Api-Key` request header.\n\n> If you do not have an API Key, you can easily generate one by heading over to the [Postman Integrations Dashboard](https://go.postman.co/integrations/services/pm_pro_api).\n\nAn API Key tells our API server that the request it received came from you. Everything that you have access to in Postman is accessible with an API Key that is generated by you.\n\nFor ease of use inside Postman, you could store your API key in an [environment variable](https://www.getpostman.com/docs/environments) called `postman_api_key` and this [Collection](https://www.getpostman.com/docs/collections) will automatically use it to make API calls.\n\n## API Key related error response\n\nIf an API Key is missing, malformed, or invalid, you will receive a `401 Unauthorised` response code and the following JSON response:\n\n```\n{\n  \"error\": { \n    \"name\": \"AuthenticationError\",\n    \"message\": \"API Key missing. Every request requires an API Key to be sent.\"\n  }\n}\n```\n\n## Using the API Key as a query parameter\n\nEvery request that accepts API Key as `X-Api-Key` request header, also accepts the key when sent as `apikey` URL query parameter.\n\nAPI key sent as part of the header has a higher priority in case you send the key using both request header and query parameter.\n\n\n# Rate Limits\n\nAPI access rate limits are applied at a per-key basis in unit time. Access to the API using a key is limited to **60 requests per minute**. In addition, every API response is accompanied by the following set of headers to identify the status of your consumption.\n\n\n| Header                  | Description |\n|-------------------------|-------------|\n| `X-RateLimit-Limit`     | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset`     | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n\nOnce you hit the rate limit, you will receive a response similar to the following JSON, with a status code of `429 Too Many Requests`.\n\n```json\n{\n  \"error\": {\n    \"name\": \"rateLimitError\",\n    \"message\": \"Rate Limit exceeded. Please retry at 1465452702843\"\n  }\n}\n```\n\n\n# Support\n\nFor help regarding accessing the Postman API, feel free to discuss it in our [Discourse Community](https://community.getpostman.com). You can also drop in a line at [help@getpostman.com](mailto:help@getpostman.com).\n\nIn the event you receive a `503` response from our servers, it implies that we have hit an unexpected spike in API access traffic and would usually be operational within the next 5 minutes. If the outage persists, or your receive any other form of `5XX` error, kindly let us know.\n\n\n# Terms of Use\n\nFor information on API terms of use and privacy, refer to our terms at [http://postman.com/legal/terms/](http://postman.com/legal/terms/) and our privacy policy at [https://www.postman.com/legal/privacy-policy/](https://www.postman.com/legal/privacy-policy/).\n\n\n# API Reference"
    },
    "servers": [
      {
        "url": "http://{{server_url}}"
      },
      {
        "url": "https://staging.mbiapis.setucodeverse.net"
      },
      {
        "url": "http://localhost:5000"
      }
    ],
    "paths": {
      "/add_user": {
        "post": {
          "description": "THIS IS DESC 1",
          "tags": [
            "default"
          ],
          "summary": "/add_user",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "phoneNumber": "919932581723",
                    "email": "pals@g.com",
                    "name": "name",
                    "dob": "2006-06-29",
                    "status": "SUCCESS",
                    "asid": "41aee27f4b884535a65ad5bf7e0da1d0",
                    "token": "750e41210fdf4fdcb97d0b26b10732e4",
                    "honorific": "Mr",
                    "identity": "919932581723",
                    "fingerprint": {
                      "network": {
                        "ip": "103.151.156.231",
                        "timezone": "Asia/Kolkata",
                        "ipLocation": {
                          "city": {
                            "name": "Kolkata"
                          },
                          "subdivisions": {
                            "code": "WB",
                            "name": "West Bengal"
                          },
                          "country": {
                            "code": "IN",
                            "name": "India"
                          },
                          "continent": {
                            "code": "AS"
                          },
                          "latitude": 22.518,
                          "longitude": 88.3832,
                          "postalCode": "700063"
                        }
                      },
                      "deviceInfo": {
                        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
                        "platform": "Win32",
                        "vendor": "Google Inc.",
                        "browser": "Chrome",
                        "connection": "4g",
                        "language": "en-GB",
                        "cookieEnabled": true,
                        "screenWidth": 1536,
                        "screenHeight": 864,
                        "screenColorDepth": 24,
                        "devicePixelRatio": 1.25,
                        "timezoneOffset": -330,
                        "cpuArchitecture": "4-core",
                        "fontFamily": "\"Times New Roman\""
                      },
                      "medium": "SMS",
                      "userId": "MO-1d64841b94c349acab011b5b9cc4b1e7"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 05:47:38 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Set-Cookie": {
                  "schema": {
                    "type": "string",
                    "example": "session_id=528b0c60-70e8-411f-a6e4-fba0b2a4daee; Expires=Tue, 26 Nov 2024 05:47:38 GMT; Secure; Path=/; SameSite=None"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "session_id": "528b0c60-70e8-411f-a6e4-fba0b2a4daee",
                    "success": "user registered successfully",
                    "user": {
                      "dob": "2006-06-29",
                      "email": "pals@g.com",
                      "gender": "Male",
                      "id": 235,
                      "name": "name",
                      "phone_number": "919932581723"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/update_user": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/update_user",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "phoneNumber": "9883158996",
                    "email": "pals@g.com",
                    "name": "Surjendu Pal",
                    "dob": "2003-04-07",
                    "status": "SUCCESS",
                    "fingerprint": {
                      "network": {
                        "ip": "160.238.92.226",
                        "timezone": {
                          "id": "Asia/Calcutta",
                          "abbr": "IST",
                          "is_dst": false,
                          "offset": 19800,
                          "utc": "+05:30",
                          "current_time": "2024-08-27T14:42:24+05:30"
                        },
                        "ipLocation": {
                          "city": {
                            "name": "Raniganj"
                          },
                          "subdivisions": {
                            "code": "WB",
                            "name": "West Bengal"
                          },
                          "country": {
                            "code": "IN",
                            "name": "India"
                          },
                          "continent": {
                            "code": "AS"
                          },
                          "latitude": 23.6290575,
                          "longitude": 87.0923906,
                          "postalCode": "713347",
                          "callingCode": "91"
                        }
                      },
                      "deviceInfo": {
                        "vendor": "Google Inc.",
                        "browser": "Chrome",
                        "language": "en-GB",
                        "platform": "Win32",
                        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
                        "connection": "4g",
                        "fontFamily": "Arial, sans-serif",
                        "screenWidth": 1536,
                        "screenHeight": 864,
                        "cookieEnabled": true,
                        "timezoneOffset": -330,
                        "cpuArchitecture": "4-core",
                        "devicePixelRatio": 1.25,
                        "screenColorDepth": 24,
                        "isAndroid": false
                      },
                      "medium": "GMAIL"
                    },
                    "uid": "235",
                    "sid": "528b0c60-70e8-411f-a6e4-fba0b2a4daee"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:10:57 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Set-Cookie": {
                  "schema": {
                    "type": "string",
                    "example": "session_id=44f72621-dc37-4991-92c4-be6cea21142b; Expires=Tue, 26 Nov 2024 06:10:57 GMT; Secure; Path=/; SameSite=None"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "created_at": 1724824058,
                    "dob": "2003-04-07",
                    "email": "pals@g.com",
                    "gender": "Male",
                    "id": 235,
                    "identity": "919932581723",
                    "last_login": 1724825457,
                    "name": "Surjendu Pal",
                    "phone": "9883158996",
                    "session_info": {
                      "device_info": {
                        "browser": "Chrome",
                        "connection": "4g",
                        "cookieEnabled": true,
                        "cpuArchitecture": "4-core",
                        "devicePixelRatio": 1.25,
                        "fontFamily": "Arial, sans-serif",
                        "isAndroid": false,
                        "language": "en-GB",
                        "platform": "Win32",
                        "screenColorDepth": 24,
                        "screenHeight": 864,
                        "screenWidth": 1536,
                        "timezoneOffset": -330,
                        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
                        "vendor": "Google Inc."
                      },
                      "expiry": 1732601457,
                      "medium": "Google",
                      "network_info": {
                        "ip": "160.238.92.226",
                        "ipLocation": {
                          "callingCode": "91",
                          "city": {
                            "name": "Raniganj"
                          },
                          "continent": {
                            "code": "AS"
                          },
                          "country": {
                            "code": "IN",
                            "name": "India"
                          },
                          "latitude": 23.6290575,
                          "longitude": 87.0923906,
                          "postalCode": "713347",
                          "subdivisions": {
                            "code": "WB",
                            "name": "West Bengal"
                          }
                        },
                        "timezone": {
                          "abbr": "IST",
                          "current_time": "2024-08-27T14:42:24+05:30",
                          "id": "Asia/Calcutta",
                          "is_dst": false,
                          "offset": 19800,
                          "utc": "+05:30"
                        }
                      },
                      "remarks": "update user details",
                      "session_id": "44f72621-dc37-4991-92c4-be6cea21142b",
                      "timestamp": 1724825457
                    },
                    "timestamp": "Wed, 28 Aug 2024 06:10:57 GMT",
                    "user_hash": "7e78111f34c17da83e666ad81a8ca2a2339afd3be1584705997734ff9b1e8b35"
                  }
                }
              }
            }
          }
        }
      },
      "/find-user": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/find-user",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "id": "pals@g.com"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "name": "type",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "email"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:16:16 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "message": "user already exists",
                    "user_info": {
                      "created_at": 1724824058,
                      "dob": "2003-04-07",
                      "email": "pals@g.com",
                      "gender": "Male",
                      "id": 235,
                      "identity": "919932581723",
                      "is_eligible_to_login": true,
                      "last_login": 1724825457,
                      "name": "Surjendu Pal",
                      "phone": "9883158996",
                      "timestamp": "Wed, 28 Aug 2024 06:16:16 GMT",
                      "user_hash": "7e78111f34c17da83e666ad81a8ca2a2339afd3be1584705997734ff9b1e8b35"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/find-user-utility": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/find-user-utility",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "id1": "9883158996",
                    "id2": "pals@g.com"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "name": "type",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "email"
            }
          ],
          "responses": {
            "404": {
              "description": "NOT FOUND",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:20:22 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "89"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "message": "Another user already registered with this phone",
                    "status": "failed"
                  }
                }
              }
            }
          }
        }
      },
      "/save-user-session": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/save-user-session",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "dob": "2006-06-12",
                    "email": "pal@gmail.com",
                    "id": 235,
                    "is_eligible_to_login": true,
                    "name": "pal",
                    "phone": "919883158996",
                    "timestamp": "Sun, 30 Jun 2024 01:56:24 GMT",
                    "network_info": {
                      "ip": "103.151.156.231",
                      "timezone": "Asia/Kolkata",
                      "ipLocation": {
                        "city": {
                          "name": "Kolkata"
                        },
                        "subdivisions": {
                          "code": "WB",
                          "name": "West Bengal"
                        },
                        "country": {
                          "code": "IN",
                          "name": "India"
                        },
                        "continent": {
                          "code": "AS"
                        },
                        "latitude": 22.518,
                        "longitude": 88.3832,
                        "postalCode": "700063"
                      }
                    },
                    "device_info": {
                      "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
                      "platform": "Win32",
                      "vendor": "Google Inc.",
                      "browser": "Chrome",
                      "connection": "4g",
                      "language": "en-GB",
                      "cookieEnabled": true,
                      "screenWidth": 1536,
                      "screenHeight": 864,
                      "screenColorDepth": 24,
                      "devicePixelRatio": 1.25,
                      "timezoneOffset": -330,
                      "cpuArchitecture": "4-core",
                      "fontFamily": "\"Times New Roman\""
                    },
                    "medium": "SMS"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:39:36 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Set-Cookie": {
                  "schema": {
                    "type": "string",
                    "example": "session_id=55377e18-2e8d-48c1-a689-824215561b27; Expires=Thu, 28 Aug 2025 06:39:36 GMT; Secure; Path=/; SameSite=None"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "session_id": "55377e18-2e8d-48c1-a689-824215561b27",
                    "success": "user registered successfully",
                    "user": {
                      "dob": "2003-04-07",
                      "email": "pals@g.com",
                      "id": 235,
                      "medium": "SMS",
                      "name": "Surjendu Pal",
                      "phone_number": "9883158996"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/remove-user-session": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/remove-user-session",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "user_id": 235,
                    "session_id": "f5f9f2b9-4e39-4cec-a490-e15b365c12fb"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:35:05 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "message": "successfully logged out",
                    "session": {
                      "device_info": {
                        "browser": "Chrome",
                        "connection": "4g",
                        "cookieEnabled": true,
                        "cpuArchitecture": "4-core",
                        "devicePixelRatio": 1.25,
                        "fontFamily": "\"Times New Roman\"",
                        "language": "en-GB",
                        "platform": "Win32",
                        "screenColorDepth": 24,
                        "screenHeight": 864,
                        "screenWidth": 1536,
                        "timezoneOffset": -330,
                        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
                        "vendor": "Google Inc."
                      },
                      "expiry": 1732602160,
                      "network_info": {
                        "ip": "103.151.156.231",
                        "ipLocation": {
                          "city": {
                            "name": "Kolkata"
                          },
                          "continent": {
                            "code": "AS"
                          },
                          "country": {
                            "code": "IN",
                            "name": "India"
                          },
                          "latitude": 22.518,
                          "longitude": 88.3832,
                          "postalCode": "700063",
                          "subdivisions": {
                            "code": "WB",
                            "name": "West Bengal"
                          }
                        },
                        "timezone": "Asia/Kolkata"
                      },
                      "remarks": "save user session while login",
                      "session_id": "f5f9f2b9-4e39-4cec-a490-e15b365c12fb",
                      "timestamp": 1724826160
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/logout-from-all-device": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/logout-from-all-device",
          "requestBody": {
            "content": {}
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 08:47:55 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "59"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "message": "successfully logged out from all device"
                  }
                }
              }
            }
          }
        }
      },
      "/get-all-sessions": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/get-all-sessions",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 08:46:51 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "2105"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "active_sessions": [
                      {
                        "device_info": {
                          "browser": "Chrome",
                          "connection": "4g",
                          "cookieEnabled": true,
                          "cpuArchitecture": "4-core",
                          "devicePixelRatio": 1.25,
                          "fontFamily": "Arial, sans-serif",
                          "isAndroid": false,
                          "language": "en-GB",
                          "platform": "Win32",
                          "screenColorDepth": 24,
                          "screenHeight": 864,
                          "screenWidth": 1536,
                          "timezoneOffset": -330,
                          "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
                          "vendor": "Google Inc."
                        },
                        "expiry": 1732603258,
                        "medium": "Mobile",
                        "network_info": {
                          "ip": "160.238.92.226",
                          "ipLocation": {
                            "callingCode": "91",
                            "city": {
                              "name": "Kolkata"
                            },
                            "continent": {
                              "code": "AS"
                            },
                            "country": {
                              "code": "IN",
                              "name": "India"
                            },
                            "latitude": 22.572646,
                            "longitude": 88.363895,
                            "postalCode": "700017",
                            "subdivisions": {
                              "code": "WB",
                              "name": "West Bengal"
                            }
                          },
                          "timezone": {
                            "abbr": "IST",
                            "current_time": "2024-07-22T12:09:54+05:30",
                            "id": "Asia/Calcutta",
                            "is_dst": false,
                            "offset": 19800,
                            "utc": "+05:30"
                          }
                        },
                        "remarks": "new account creation",
                        "session_id": "be27cd09-fa4a-4204-9dd1-ab8c52c654eb",
                        "timestamp": 1724827258,
                        "user_info": {
                          "created_at": 1724827258,
                          "dob": "",
                          "email": "",
                          "gender": "Male",
                          "id": 236,
                          "identity": "12222222222222222",
                          "last_login": 1724827258,
                          "name": "Surjendu Pal",
                          "phone": "12222222222222222",
                          "timestamp": "Wed, 28 Aug 2024 14:16:51 GMT",
                          "user_hash": "e0d37264a053f43132264900693b84034bf341d653f679613ed4965b701e4754"
                        }
                      }
                    ],
                    "message": "successfully got the user active sessions"
                  }
                }
              }
            }
          }
        }
      },
      "/check-session-status": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/check-session-status",
          "responses": {
            "404": {
              "description": "NOT FOUND",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 08:45:08 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "43"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "message": "Session expired/removed"
                  }
                }
              }
            }
          }
        }
      },
      "/create_order": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/create_order",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "courseAmount": 20.3
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:46:11 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "41"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "order_id": "order_OqE1rqVERypPO7"
                  }
                }
              }
            }
          }
        }
      },
      "/record_payment_failure": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/record_payment_failure",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "razorpay_payment_id": "pay_OinEAFxk0kyPNE",
                    "razorpay_order_id": "order_OinDzE1qhGhoCp",
                    "uid": 98,
                    "money": 88
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:47:33 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "62"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "status": "Payment failed  and stored data sucessfully"
                  }
                }
              }
            }
          }
        }
      },
      "/verify_payment": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/verify_payment",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "razorpay_payment_id": "pay_OinEAFxk0kyPNE",
                    "razorpay_order_id": "order_OinDzE1qhGhoCp",
                    "razorpay_signature": "5f9dcf6583014bfd5fff52dc2a479965438508d7d515f5acb66b61d72412ba9a",
                    "uid": 235,
                    "money": 88,
                    "duration": 1,
                    "contentId": 1,
                    "rechargeType": "wallet",
                    "via": "web"
                  }
                }
              }
            }
          },
          "responses": {
            "400": {
              "description": "BAD REQUEST",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 08:40:22 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "32"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "error": "user not found"
                  }
                }
              }
            }
          }
        }
      },
      "/get_all_articles": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/get_all_articles",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:57:04 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": [
                    {
                      "content": "Yesterday afternoon, a dramatic rescue unfolded at Riverside Park when local resident John Harris bravely saved a young boy from drowning. Witnesses report that the child, seven-year-old Timmy Jacobs, had fallen into the swift-moving river while playing near the water’s edge. Harris, who was jogging nearby, immediately sprang into action, diving into the river and pulling the boy to safety. Paramedics arrived shortly after and confirmed that Timmy was unharmed, thanks to Harris's quick thinking and heroism. The community is now calling for Harris to be recognized with a bravery award.",
                      "id": 1,
                      "price": "4.00",
                      "title": "\"Local Hero Saves Child from Drowning in River\""
                    },
                    {
                      "content": "In a unanimous vote last night, the City Council approved the construction of a new affordable housing development aimed at addressing the city’s growing housing crisis. The project, set to break ground next spring, will include 200 units of mixed-income housing, a community center, and green spaces. Mayor Jane Doe praised the decision, stating, \"This development is a crucial step toward ensuring all our residents have access to safe and affordable housing.\" The project has received support from various community organizations, although some residents have raised concerns about potential traffic increases in the area.",
                      "id": 2,
                      "price": "0.00",
                      "title": "\"City Council Approves New Affordable Housing Development\""
                    },
                    {
                      "content": "Scientists at GreenTech Innovations have unveiled a groundbreaking new solar panel technology that promises to significantly increase energy efficiency and reduce costs. The new panels, which utilize advanced nanomaterials, can convert up to 50% more sunlight into electricity compared to current models. This breakthrough could revolutionize the renewable energy industry and accelerate the transition to sustainable energy sources. Dr. Emily Chen, the lead researcher on the project, stated, \"Our goal is to make solar energy more accessible and affordable for everyone.\" The company plans to begin mass production of the panels next year.",
                      "id": 3,
                      "price": "3.00",
                      "title": "\"Breakthrough in Renewable Energy: New Solar Panel Technology Unveiled\""
                    },
                    {
                      "content": "After a three-year restoration project, the historic Grand Theater reopened its doors to the public last night with a grand celebration and a performance by the city’s symphony orchestra. The theater, originally built in 1920, had fallen into disrepair and was at risk of being demolished before a grassroots campaign raised the funds needed for its restoration. The renovation preserved the theater’s original architectural details while updating its facilities to modern standards. \"This is a victory for our community and for the preservation of our cultural heritage,\" said Laura Martinez, president of the Historical Society. The theater will host a variety of performances and events throughout the year.",
                      "id": 4,
                      "price": "5.00",
                      "title": "\"Historic Landmark Reopens After Extensive Restoration\""
                    },
                    {
                      "content": "content1",
                      "id": 5,
                      "price": "4.00",
                      "title": "title1"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "/article/2": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/article",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 06:59:55 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "content": "In a unanimous vote last night, the City Council approved the construction of a new affordable housing development aimed at addressing the city’s growing housing crisis. The project, set to break ground next spring, will include 200 units of mixed-income housing, a community center, and green spaces. Mayor Jane Doe praised the decision, stating, \"This development is a crucial step toward ensuring all our residents have access to safe and affordable housing.\" The project has received support from various community organizations, although some residents have raised concerns about potential traffic increases in the area.",
                    "id": 2,
                    "price": "0.00",
                    "title": "\"City Council Approves New Affordable Housing Development\""
                  }
                }
              }
            }
          }
        }
      },
      "/wallet/235": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/wallet",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:05:42 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "20"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "balance": 84
                  }
                }
              }
            }
          }
        }
      },
      "/transactions/235": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/transactions",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:22:47 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Transfer-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "chunked"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                },
                "Vary": {
                  "schema": {
                    "type": "string",
                    "example": "Accept-Encoding"
                  }
                },
                "Content-Encoding": {
                  "schema": {
                    "type": "string",
                    "example": "gzip"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": [
                    {
                      "amount": "88.0",
                      "id": 287,
                      "payment_id": "pay_OinEAFxk0kyPNE",
                      "payment_method": {
                        "details": "PUNB_R",
                        "method": "netbanking"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:49:34 GMT"
                    },
                    {
                      "amount": "88.0",
                      "id": 288,
                      "payment_id": "pay_OinEAFxk0kyPNE",
                      "payment_method": {
                        "details": "PUNB_R",
                        "method": "netbanking"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:50:39 GMT"
                    },
                    {
                      "amount": "4.00",
                      "id": 289,
                      "payment_id": "",
                      "payment_method": {
                        "method": "wallet"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:50:39 GMT"
                    },
                    {
                      "amount": "5",
                      "id": 290,
                      "payment_id": "pay_OinEAFxk0kyPNE",
                      "payment_method": {
                        "method": "razorpay"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:53:46 GMT"
                    },
                    {
                      "amount": "5",
                      "id": 291,
                      "payment_id": "pay_OinEAFxk0kyPNE",
                      "payment_method": {
                        "method": "razorpay"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:53:54 GMT"
                    },
                    {
                      "amount": "5",
                      "id": 292,
                      "payment_id": "pay_OinEAFxk0kyPNE",
                      "payment_method": {
                        "method": "razorpay"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 06:55:02 GMT"
                    },
                    {
                      "amount": "4.00",
                      "id": 293,
                      "payment_id": "",
                      "payment_method": {
                        "method": "wallet"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 07:10:56 GMT"
                    },
                    {
                      "amount": "4.00",
                      "id": 294,
                      "payment_id": "",
                      "payment_method": {
                        "method": "wallet"
                      },
                      "payment_status": "success",
                      "payment_time": "Wed, 28 Aug 2024 12:49:14 GMT"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "/pay_article": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/pay_article",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "uid": 235,
                    "contentId": 1
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:19:15 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "26"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "status": "success"
                  }
                }
              }
            }
          }
        }
      },
      "/check-email": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/check-email",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "email": "shubhadipmaity041@gmail.com"
                  }
                }
              }
            }
          },
          "responses": {
            "500": {
              "description": "INTERNAL SERVER ERROR",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:20:54 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "text/html; charset=utf-8"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "48492"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  },
                  "example": "<!doctype html><html lang=en><head><title>sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column &#34;epaper_subscription.orderid&#34;.\n\n[SQL: SELECT epaper_subscription.id AS epaper_subscription_id, epaper_subscription.order_id AS epaper_subscription_order_id, epaper_subscription.email AS epaper_subscription_email, epaper_subscription.user_id AS epaper_subscription_user_id, epaper_subscription.start_date AS epaper_subscription_start_date, epaper_subscription.end_date AS epaper_subscription_end_date, epaper_subscription.first_name AS epaper_subscription_first_name, epaper_subscription.&#34;mobileNo&#34; AS &#34;epaper_subscription_mobileNo&#34;, epaper_subscription.state_name AS epaper_subscription_state_name, epaper_subscription.content_details AS epaper_subscription_content_details, epaper_subscription.user_hash AS epaper_subscription_user_hash \nFROM epaper_subscription \nWHERE epaper_subscription.email = %(email_1)s \n LIMIT %(param_1)s]\n[parameters: {&#39;email_1&#39;: &#39;shubhadipmaity041@gmail.com&#39;, &#39;param_1&#39;: 1}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n // Werkzeug Debugger</title><link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\"><link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\"><script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script><script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"yXAs8IVMDuHJAiWmSarn\";\n    </script></head><body style=\"background-color: #fff\"><div class=\"debugger\"><h1>ProgrammingError</h1><div class=\"detail\"><p class=\"errormsg\">sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column &#34;epaper_subscription.orderid&#34;.\n\n[SQL: SELECT epaper_subscription.id AS epaper_subscription_id, epaper_subscription.order_id AS epaper_subscription_order_id, epaper_subscription.email AS epaper_subscription_email, epaper_subscription.user_id AS epaper_subscription_user_id, epaper_subscription.start_date AS epaper_subscription_start_date, epaper_subscription.end_date AS epaper_subscription_end_date, epaper_subscription.first_name AS epaper_subscription_first_name, epaper_subscription.&#34;mobileNo&#34; AS &#34;epaper_subscription_mobileNo&#34;, epaper_subscription.state_name AS epaper_subscription_state_name, epaper_subscription.content_details AS epaper_subscription_content_details, epaper_subscription.user_hash AS epaper_subscription_user_hash \nFROM epaper_subscription \nWHERE epaper_subscription.email = %(email_1)s \n LIMIT %(param_1)s]\n[parameters: {&#39;email_1&#39;: &#39;shubhadipmaity041@gmail.com&#39;, &#39;param_1&#39;: 1}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n</p></div><h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2><div class=\"traceback\"><h3></h3><ul><li><div class=\"frame\" id=\"frame-125007448929920\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1971</em>,\n      in<code class=\"function\">_exec_single_context</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre><pre class=\"line before\"><span class=\"ws\">                        </span>):</pre><pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre><pre class=\"line before\"><span class=\"ws\">                            </span>break</pre><pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre><pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(</pre><pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre><pre class=\"line after\"><span class=\"ws\">                    </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre><pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div></div><li><div class=\"frame\" id=\"frame-125007448930032\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line<em class=\"line\">919</em>,\n      in<code class=\"function\">do_execute</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre><pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre><pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre><pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div></div><li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div><li><div class=\"frame\" id=\"frame-125007456954608\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">1498</em>,\n      in<code class=\"function\">__call__</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; cabc.Iterable[bytes]:</pre><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre><pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div></div><li><div class=\"frame\" id=\"frame-125007456953488\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">1476</em>,\n      in<code class=\"function\">wsgi_app</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre><pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre><pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre><pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre><pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre><pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre><pre class=\"line after\"><span class=\"ws\">                </span>raise</pre><pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre><pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div></div><li><div class=\"frame\" id=\"frame-125007456952592\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py\"</cite>,\n      line<em class=\"line\">176</em>,\n      in<code class=\"function\">wrapped_function</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span># Wrap exception handlers with cross_origin</pre><pre class=\"line before\"><span class=\"ws\">        </span># These error handlers will still respect the behavior of the route</pre><pre class=\"line before\"><span class=\"ws\">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><pre class=\"line before\"><span class=\"ws\">            </span>def _after_request_decorator(f):</pre><pre class=\"line before\"><span class=\"ws\">                </span>def wrapped_function(*args, **kwargs):</pre><pre class=\"line current\"><span class=\"ws\">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre><pre class=\"line after\"><span class=\"ws\">                </span>return wrapped_function</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><pre class=\"line after\"><span class=\"ws\">                </span>app.handle_exception = _after_request_decorator(</pre><pre class=\"line after\"><span class=\"ws\">                    </span>app.handle_exception)</pre></div></div><li><div class=\"frame\" id=\"frame-125007456958640\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">1473</em>,\n      in<code class=\"function\">wsgi_app</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre><pre class=\"line before\"><span class=\"ws\">        </span>error: BaseException | None = None</pre><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre><pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre><pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre><pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre><pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre><pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div></div><li><div class=\"frame\" id=\"frame-125007456955168\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">882</em>,\n      in<code class=\"function\">full_dispatch_request</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre><pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre><pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre><pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre><pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre><pre class=\"line after\"><span class=\"ws\">        </span>self,</pre><pre class=\"line after\"><span class=\"ws\">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div></div><li><div class=\"frame\" id=\"frame-125007456959088\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py\"</cite>,\n      line<em class=\"line\">176</em>,\n      in<code class=\"function\">wrapped_function</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span># Wrap exception handlers with cross_origin</pre><pre class=\"line before\"><span class=\"ws\">        </span># These error handlers will still respect the behavior of the route</pre><pre class=\"line before\"><span class=\"ws\">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><pre class=\"line before\"><span class=\"ws\">            </span>def _after_request_decorator(f):</pre><pre class=\"line before\"><span class=\"ws\">                </span>def wrapped_function(*args, **kwargs):</pre><pre class=\"line current\"><span class=\"ws\">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))</pre><pre class=\"line after\"><span class=\"ws\">                </span>return wrapped_function</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><pre class=\"line after\"><span class=\"ws\">                </span>app.handle_exception = _after_request_decorator(</pre><pre class=\"line after\"><span class=\"ws\">                    </span>app.handle_exception)</pre></div></div><li><div class=\"frame\" id=\"frame-125007456957968\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">880</em>,\n      in<code class=\"function\">full_dispatch_request</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre><pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre><pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre><pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre><pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre><pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div></div><li><div class=\"frame\" id=\"frame-125007456954496\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\"</cite>,\n      line<em class=\"line\">865</em>,\n      in<code class=\"function\">dispatch_request</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre><pre class=\"line before\"><span class=\"ws\">        </span>):</pre><pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre><pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre><pre class=\"line before\"><span class=\"ws\">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre><pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre><pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div></div><li><div class=\"frame\" id=\"frame-125007456952032\"><h4>File <cite class=\"filename\">\"/var/backend/app.py\"</cite>,\n      line<em class=\"line\">1083</em>,\n      in<code class=\"function\">check_email</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>else:</pre><pre class=\"line before\"><span class=\"ws\">                </span>return jsonify({&#34;redirect&#34;: &#34;epaperSubscription&#34;}), 200</pre><pre class=\"line before\"><span class=\"ws\">        </span>else:</pre><pre class=\"line before\"><span class=\"ws\">            </span>return jsonify({&#34;redirect&#34;: &#34;epaperSubscription&#34;}), 200</pre><pre class=\"line before\"><span class=\"ws\">    </span>else:</pre><pre class=\"line current\"><span class=\"ws\">        </span>subscription = EPaper_Subscription.query.filter_by(email=email).first()</pre><pre class=\"line after\"><span class=\"ws\">        </span>if subscription:</pre><pre class=\"line after\"><span class=\"ws\">            </span>if is_subscription_valid(subscription.start_date, subscription.end_date):</pre><pre class=\"line after\"><span class=\"ws\">                </span>return jsonify({&#34;redirect&#34;: &#34;epaper&#34;}), 200</pre><pre class=\"line after\"><span class=\"ws\">            </span>else:</pre><pre class=\"line after\"><span class=\"ws\">                </span>return jsonify({&#34;redirect&#34;: &#34;epaperSubscription&#34;}), 200</pre></div></div><li><div class=\"frame\" id=\"frame-125007456957856\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py\"</cite>,\n      line<em class=\"line\">2728</em>,\n      in<code class=\"function\">first</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre><pre class=\"line before\"><span class=\"ws\">        </span># replicates limit(1) behavior</pre><pre class=\"line before\"><span class=\"ws\">        </span>if self._statement is not None:</pre><pre class=\"line before\"><span class=\"ws\">            </span>return self._iter().first()  # type: ignore</pre><pre class=\"line before\"><span class=\"ws\">        </span>else:</pre><pre class=\"line current\"><span class=\"ws\">            </span>return self.limit(1)._iter().first()  # type: ignore</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def one_or_none(self) -&gt; Optional[_T]:</pre><pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Return at most one result or raise an exception.</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">        </span>Returns ``None`` if the query selects</pre></div></div><li><div class=\"frame\" id=\"frame-125007457884352\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py\"</cite>,\n      line<em class=\"line\">2827</em>,\n      in<code class=\"function\">_iter</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def _iter(self) -&gt; Union[ScalarResult[_T], Result[_T]]:</pre><pre class=\"line before\"><span class=\"ws\">        </span># new style execution.</pre><pre class=\"line before\"><span class=\"ws\">        </span>params = self._params</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>statement = self._statement_20()</pre><pre class=\"line current\"><span class=\"ws\">        </span>result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(</pre><pre class=\"line after\"><span class=\"ws\">            </span>statement,</pre><pre class=\"line after\"><span class=\"ws\">            </span>params,</pre><pre class=\"line after\"><span class=\"ws\">            </span>execution_options={&#34;_sa_orm_load_options&#34;: self.load_options},</pre><pre class=\"line after\"><span class=\"ws\">        </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre></div></div><li><div class=\"frame\" id=\"frame-125007457884464\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line<em class=\"line\">2306</em>,\n      in<code class=\"function\">execute</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>:return: a :class:`_engine.Result` object.</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre><pre class=\"line current\"><span class=\"ws\">        </span>return self._execute_internal(</pre><pre class=\"line after\"><span class=\"ws\">            </span>statement,</pre><pre class=\"line after\"><span class=\"ws\">            </span>params,</pre><pre class=\"line after\"><span class=\"ws\">            </span>execution_options=execution_options,</pre><pre class=\"line after\"><span class=\"ws\">            </span>bind_arguments=bind_arguments,</pre><pre class=\"line after\"><span class=\"ws\">            </span>_parent_execute_state=_parent_execute_state,</pre></div></div><li><div class=\"frame\" id=\"frame-125007452994720\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line<em class=\"line\">2191</em>,\n      in<code class=\"function\">_execute_internal</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>return conn.scalar(</pre><pre class=\"line before\"><span class=\"ws\">                </span>statement, params or {}, execution_options=execution_options</pre><pre class=\"line before\"><span class=\"ws\">            </span>)</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>if compile_state_cls:</pre><pre class=\"line current\"><span class=\"ws\">            </span>result: Result[Any] = compile_state_cls.orm_execute_statement(</pre><pre class=\"line after\"><span class=\"ws\">                </span>self,</pre><pre class=\"line after\"><span class=\"ws\">                </span>statement,</pre><pre class=\"line after\"><span class=\"ws\">                </span>params or {},</pre><pre class=\"line after\"><span class=\"ws\">                </span>execution_options,</pre><pre class=\"line after\"><span class=\"ws\">                </span>bind_arguments,</pre></div></div><li><div class=\"frame\" id=\"frame-125007452994832\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/context.py\"</cite>,\n      line<em class=\"line\">293</em>,\n      in<code class=\"function\">orm_execute_statement</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>params,</pre><pre class=\"line before\"><span class=\"ws\">        </span>execution_options,</pre><pre class=\"line before\"><span class=\"ws\">        </span>bind_arguments,</pre><pre class=\"line before\"><span class=\"ws\">        </span>conn,</pre><pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result:</pre><pre class=\"line current\"><span class=\"ws\">        </span>result = conn.execute(</pre><pre class=\"line after\"><span class=\"ws\">            </span>statement, params or {}, execution_options=execution_options</pre><pre class=\"line after\"><span class=\"ws\">        </span>)</pre><pre class=\"line after\"><span class=\"ws\">        </span>return cls.orm_setup_cursor_result(</pre><pre class=\"line after\"><span class=\"ws\">            </span>session,</pre><pre class=\"line after\"><span class=\"ws\">            </span>statement,</pre></div></div><li><div class=\"frame\" id=\"frame-125007453312656\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1422</em>,\n      in<code class=\"function\">execute</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre><pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre><pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre><pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre><pre class=\"line before\"><span class=\"ws\">        </span>else:</pre><pre class=\"line current\"><span class=\"ws\">            </span>return meth(</pre><pre class=\"line after\"><span class=\"ws\">                </span>self,</pre><pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre><pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre><pre class=\"line after\"><span class=\"ws\">            </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre></div></div><li><div class=\"frame\" id=\"frame-125007453587376\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line<em class=\"line\">514</em>,\n      in<code class=\"function\">_execute_on_connection</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre><pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre><pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre><pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre><pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre><pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(</pre><pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre><pre class=\"line after\"><span class=\"ws\">            </span>)</pre><pre class=\"line after\"><span class=\"ws\">        </span>else:</pre><pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre></div></div><li><div class=\"frame\" id=\"frame-125007448718496\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1644</em>,\n      in<code class=\"function\">_execute_clauseelement</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre><pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre><pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre><pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre><pre class=\"line before\"><span class=\"ws\">        </span>)</pre><pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(</pre><pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre><pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre><pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre><pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre><pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div></div><li><div class=\"frame\" id=\"frame-125007448718608\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1850</em>,\n      in<code class=\"function\">_execute_context</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>context.pre_exec()</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>if context.execute_style is ExecuteStyle.INSERTMANYVALUES:</pre><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(dialect, context)</pre><pre class=\"line before\"><span class=\"ws\">        </span>else:</pre><pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(</pre><pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre><pre class=\"line after\"><span class=\"ws\">            </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre><pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div></div><li><div class=\"frame\" id=\"frame-125007448718720\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1990</em>,\n      in<code class=\"function\">_exec_single_context</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre><pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(</pre><pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre><pre class=\"line after\"><span class=\"ws\">            </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">        </span>return result</pre><pre class=\"line after\"><span class=\"ws\"></span></pre></div></div><li><div class=\"frame\" id=\"frame-125007448718832\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">2357</em>,\n      in<code class=\"function\">_handle_dbapi_exception</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre><pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre><pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre><pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre><pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e</pre><pre class=\"line after\"><span class=\"ws\">            </span>else:</pre><pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre><pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre><pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre><pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div></div><li><div class=\"frame\" id=\"frame-125007448718944\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line<em class=\"line\">1971</em>,\n      in<code class=\"function\">_exec_single_context</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre><pre class=\"line before\"><span class=\"ws\">                        </span>):</pre><pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre><pre class=\"line before\"><span class=\"ws\">                            </span>break</pre><pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre><pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(</pre><pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre><pre class=\"line after\"><span class=\"ws\">                    </span>)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre><pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div></div><li><div class=\"frame\" id=\"frame-125007448719056\"><h4>File <cite class=\"filename\">\"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line<em class=\"line\">919</em>,\n      in<code class=\"function\">do_execute</code></h4><div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre><pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre><pre class=\"line before\"><span class=\"ws\"></span></pre><pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre><pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre><pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre><pre class=\"line after\"><span class=\"ws\"></span></pre><pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div></div></ul><blockquote>sqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column &#34;epaper_subscription.orderid&#34;.\n\n[SQL: SELECT epaper_subscription.id AS epaper_subscription_id, epaper_subscription.order_id AS epaper_subscription_order_id, epaper_subscription.email AS epaper_subscription_email, epaper_subscription.user_id AS epaper_subscription_user_id, epaper_subscription.start_date AS epaper_subscription_start_date, epaper_subscription.end_date AS epaper_subscription_end_date, epaper_subscription.first_name AS epaper_subscription_first_name, epaper_subscription.&#34;mobileNo&#34; AS &#34;epaper_subscription_mobileNo&#34;, epaper_subscription.state_name AS epaper_subscription_state_name, epaper_subscription.content_details AS epaper_subscription_content_details, epaper_subscription.user_hash AS epaper_subscription_user_hash \nFROM epaper_subscription \nWHERE epaper_subscription.email = %(email_1)s \n LIMIT %(param_1)s]\n[parameters: {&#39;email_1&#39;: &#39;shubhadipmaity041@gmail.com&#39;, &#39;param_1&#39;: 1}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n</blockquote></div><div class=\"plain\"><p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p><textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1971, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 919, in do_execute\n    cursor.execute(statement, parameters)\npsycopg2.errors.UndefinedColumn: column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column &#34;epaper_subscription.orderid&#34;.\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 1476, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py&#34;, line 176, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py&#34;, line 176, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py&#34;, line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n  File &#34;/var/backend/app.py&#34;, line 1083, in check_email\n    subscription = EPaper_Subscription.query.filter_by(email=email).first()\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2728, in first\n    return self.limit(1)._iter().first()  # type: ignore\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py&#34;, line 2827, in _iter\n    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2306, in execute\n    return self._execute_internal(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py&#34;, line 2191, in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/context.py&#34;, line 293, in orm_execute_statement\n    result = conn.execute(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1422, in execute\n    return meth(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/sql/elements.py&#34;, line 514, in _execute_on_connection\n    return connection._execute_clauseelement(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1644, in _execute_clauseelement\n    ret = self._execute_context(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1850, in _execute_context\n    return self._exec_single_context(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1990, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 2357, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py&#34;, line 1971, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py&#34;, line 919, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column &#34;epaper_subscription.orderid&#34;.\n\n[SQL: SELECT epaper_subscription.id AS epaper_subscription_id, epaper_subscription.order_id AS epaper_subscription_order_id, epaper_subscription.email AS epaper_subscription_email, epaper_subscription.user_id AS epaper_subscription_user_id, epaper_subscription.start_date AS epaper_subscription_start_date, epaper_subscription.end_date AS epaper_subscription_end_date, epaper_subscription.first_name AS epaper_subscription_first_name, epaper_subscription.&#34;mobileNo&#34; AS &#34;epaper_subscription_mobileNo&#34;, epaper_subscription.state_name AS epaper_subscription_state_name, epaper_subscription.content_details AS epaper_subscription_content_details, epaper_subscription.user_hash AS epaper_subscription_user_hash \nFROM epaper_subscription \nWHERE epaper_subscription.email = %(email_1)s \n LIMIT %(param_1)s]\n[parameters: {&#39;email_1&#39;: &#39;shubhadipmaity041@gmail.com&#39;, &#39;param_1&#39;: 1}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n</textarea></div><div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span></div><div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.</div>\n    </div><div class=\"pin-prompt\"><div class=\"inner\"><h3>Console Locked</h3><p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form><p>PIN:\n            <input type=text name=pin size=14><input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body></html>\n<!--\n\nTraceback (most recent call last):\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1971, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\", line 919, in do_execute\n    cursor.execute(statement, parameters)\npsycopg2.errors.UndefinedColumn: column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"epaper_subscription.orderid\".\n\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 1498, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 1476, in wsgi_app\n    response = self.handle_exception(e)\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py\", line 176, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 1473, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 882, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask_cors/extension.py\", line 176, in wrapped_function\n    return cors_after_request(app.make_response(f(*args, **kwargs)))\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 880, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/flask/app.py\", line 865, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\n  File \"/var/backend/app.py\", line 1083, in check_email\n    subscription = EPaper_Subscription.query.filter_by(email=email).first()\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py\", line 2728, in first\n    return self.limit(1)._iter().first()  # type: ignore\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/query.py\", line 2827, in _iter\n    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\", line 2306, in execute\n    return self._execute_internal(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/session.py\", line 2191, in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/orm/context.py\", line 293, in orm_execute_statement\n    result = conn.execute(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1422, in execute\n    return meth(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/sql/elements.py\", line 514, in _execute_on_connection\n    return connection._execute_clauseelement(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1644, in _execute_clauseelement\n    ret = self._execute_context(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1850, in _execute_context\n    return self._exec_single_context(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1990, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 2357, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/base.py\", line 1971, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/home/ubuntu/.local/lib/python3.10/site-packages/sqlalchemy/engine/default.py\", line 919, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.ProgrammingError: (psycopg2.errors.UndefinedColumn) column epaper_subscription.order_id does not exist\nLINE 1: ...epaper_subscription.id AS epaper_subscription_id, epaper_sub...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"epaper_subscription.orderid\".\n\n[SQL: SELECT epaper_subscription.id AS epaper_subscription_id, epaper_subscription.order_id AS epaper_subscription_order_id, epaper_subscription.email AS epaper_subscription_email, epaper_subscription.user_id AS epaper_subscription_user_id, epaper_subscription.start_date AS epaper_subscription_start_date, epaper_subscription.end_date AS epaper_subscription_end_date, epaper_subscription.first_name AS epaper_subscription_first_name, epaper_subscription.\"mobileNo\" AS \"epaper_subscription_mobileNo\", epaper_subscription.state_name AS epaper_subscription_state_name, epaper_subscription.content_details AS epaper_subscription_content_details, epaper_subscription.user_hash AS epaper_subscription_user_hash \nFROM epaper_subscription \nWHERE epaper_subscription.email = %(email_1)s \n LIMIT %(param_1)s]\n[parameters: {'email_1': 'shubhadipmaity041@gmail.com', 'param_1': 1}]\n(Background on this error at: https://sqlalche.me/e/20/f405)\n\n\n-->\n"
                }
              }
            }
          }
        }
      },
      "/subscriptionValidity": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/subscriptionValidity",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "user_id": 235
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:34:06 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "22"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "access": "all"
                  }
                }
              }
            }
          }
        }
      },
      "/get_subscriber_by_id": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/get_subscriber_by_id",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "user_id": 235
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:48:59 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "25"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "success": "exist"
                  }
                }
              }
            }
          }
        }
      },
      "/get_articleCost_by_id": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/get_articleCost_by_id",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "id": 3
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "nginx"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 07:50:56 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "29"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "keep-alive"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "article_cost": "3.00"
                  }
                }
              }
            }
          }
        }
      },
      "/get-user": {
        "get": {
          "tags": [
            "default"
          ],
          "summary": "/get-user",
          "responses": {
            "200": {
              "description": "OK",
              "headers": {
                "Server": {
                  "schema": {
                    "type": "string",
                    "example": "Werkzeug/3.0.2 Python/3.12.3"
                  }
                },
                "Date": {
                  "schema": {
                    "type": "string",
                    "example": "Wed, 28 Aug 2024 08:56:25 GMT"
                  }
                },
                "Content-Type": {
                  "schema": {
                    "type": "string",
                    "example": "application/json"
                  }
                },
                "Content-Length": {
                  "schema": {
                    "type": "integer",
                    "example": "1844"
                  }
                },
                "Connection": {
                  "schema": {
                    "type": "string",
                    "example": "close"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "created_at": 1724832584,
                    "dob": "",
                    "email": "shreya@setuschool.com",
                    "gender": "Female",
                    "id": 237,
                    "identity": "shreya@setuschool.com",
                    "last_login": 1724832957,
                    "name": "Shreya Chakraborty",
                    "phone": "",
                    "session_info": {
                      "device_info": {
                        "browser": "Chrome",
                        "connection": "4g",
                        "cookieEnabled": true,
                        "cpuArchitecture": "8-core",
                        "devicePixelRatio": 2,
                        "fontFamily": "Arial, sans-serif",
                        "isAndroid": false,
                        "language": "en-US",
                        "platform": "Win32",
                        "screenColorDepth": 24,
                        "screenHeight": 900,
                        "screenWidth": 1440,
                        "timezoneOffset": -330,
                        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
                        "vendor": "Google Inc."
                      },
                      "expiry": 1732608957,
                      "medium": "Google",
                      "network_info": {
                        "ip": "49.37.43.7",
                        "ipLocation": {
                          "callingCode": "91",
                          "city": {
                            "name": "Navi Mumbai"
                          },
                          "continent": {
                            "code": "AS"
                          },
                          "country": {
                            "code": "IN",
                            "name": "India"
                          },
                          "latitude": 18.9832829,
                          "longitude": 73.108491,
                          "postalCode": "410206",
                          "subdivisions": {
                            "code": "MH",
                            "name": "Maharashtra"
                          }
                        },
                        "timezone": {
                          "abbr": "IST",
                          "current_time": "2024-08-28T13:45:56+05:30",
                          "id": "Asia/Calcutta",
                          "is_dst": false,
                          "offset": 19800,
                          "utc": "+05:30"
                        }
                      },
                      "remarks": "update user details",
                      "session_id": "f6b19956-9f15-4ff7-95f2-66761fc6a8af",
                      "timestamp": 1724832957
                    },
                    "timestamp": "Wed, 28 Aug 2024 14:26:25 GMT",
                    "user_hash": "a3dc6b7ee3008cca31f931188a5aed60f6efa0e37535d5e3386b0cf00dbc6cf2"
                  }
                }
              }
            }
          }
        }
      },
      "/merge-users": {
        "post": {
          "tags": [
            "default"
          ],
          "summary": "/merge-users",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "base_account_id": 235,
                    "child_account_ids": [
                      237
                    ]
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {}
              }
            }
          }
        }
      }
    }
  }